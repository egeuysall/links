name: Deploy Links to GitHub Pages

on:
  push:
    branches: ["development"]
  pull_request:
    branches: ["development"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Detect Package Manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_ENV
            echo "command=install" >> $GITHUB_ENV
            echo "runner=yarn" >> $GITHUB_ENV
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_ENV
            echo "command=ci" >> $GITHUB_ENV
            echo "runner=npx --no-install" >> $GITHUB_ENV
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ env.manager }}

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            node_modules
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install Dependencies
        run: ${{ env.manager }} ${{ env.command }}

      - name: Lint Code
        run: ${{ env.runner }} next lint

      - name: Run Tests
        run: ${{ env.runner }} jest --ci

      - name: Build Next.js Site
        run: ${{ env.runner }} next build

      - name: Export Static Site
        run: ${{ env.runner }} next export

      - name: Upload Build Artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Configure Custom Domain (Optional)
        run: echo "yourcustomdomain.com" > ./out/CNAME

      - name: Notify Success
        if: success()
        run: |
          curl -H "Content-Type: application/json" -X POST -d '{
            "content": "âœ… Links deployed successfully!"
          }' ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notify Failure
        if: failure()
        run: |
          curl -H "Content-Type: application/json" -X POST -d '{
            "content": "ðŸš¨ Links deployment failed!"
          }' ${{ secrets.DISCORD_WEBHOOK_URL }}
